from telethon import TelegramClient
import asyncio
import requests

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ API Telegram
api_id = '4848484'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
api_hash = 'ejejsjwjwjs'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash
phone_number = 'YOUR_PHONE_NUMBER'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('session_name', api_id, api_hash)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å CoinGecko
def get_popular_tokens(limit=10):
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": limit,
        "page": 1,
        "sparkline": False
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def format_message(tokens):
    formatted_tokens = []
    for token in tokens:
        name = token['name']
        symbol = token['symbol'].upper()
        price = token['current_price']
        market_cap = token['market_cap']
        price_change_24h = token['price_change_percentage_24h']
        volume_24h = token['total_volume']

        emoji_up = "üìà" if price_change_24h >= 0 else "üìâ"
        emoji_cap = "üí∞"
        emoji_vol = "üíπ"

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
        name = name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
        symbol = symbol.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        formatted_tokens.append(
            f"‚ú® **–¢–æ–∫–µ–Ω:** {name} ({symbol})\n"
            f"üíµ **–¶–µ–Ω–∞:** ${price:,.2f} {emoji_up}\n"
            f"üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á:** {price_change_24h:+.2f}%\n"
            f"üè¶ **–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** ${market_cap:,.0f} {emoji_cap}\n"
            f"üìà **–û–±—ä–µ–º –∑–∞ 24—á:** ${volume_24h:,.0f} {emoji_vol}\n"
        )

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–µ–π—á–∞—Å:**\n\n" + "\n".join(formatted_tokens)
    message += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüîó [–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/cryptocoins10sec)"
    return message

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await client.start(phone_number)
    print("Userbot started!")

    channel_username = 'cryptocoins10sec'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    initial_message = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö..."
    sent_message = await client.send_message(channel_username, initial_message, parse_mode='markdown')
    message_id = sent_message.id
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {message_id}")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        tokens = get_popular_tokens(limit=10)
        if tokens:
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã
                new_message = format_message(tokens)
                await client.edit_message(channel_username, message_id, new_message, parse_mode='markdown')
                print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö.")

        await asyncio.sleep(120)  # –û–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

# –ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞
with client:
    client.loop.run_until_complete(main())
